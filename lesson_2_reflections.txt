What happens when you initialize a repository? Why do you need to do it?

Initializing a repository changes a directory (or creates one) from behaving normally to being a git repository, with the additional version tracking functionality that this change brings with it.  

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area only contains the items that the user has selected for being included in the commit.  The working directory contains all files in the repository in its current HEAD state, while the repository itself contains the entire history of the project.  The staging area offers value in providing choice to the user of what files to include in the commit, thereby enabling each commit to represent a single, logical change in the project.


How can you use the staging area to make sure you have one commit per logical change?

Files can be added or removed to the staging area with git add <file> and git rm <file>.  Additionally, the user can verify any changes between the staging area and the most recent commit.  Using both of these features, it is possible to make sure that the staging area contains only a single logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could be useful when testing out an experimental feature or creating an alternate version of the project with various differences (an easier version of a game, etc).  


How do the diagrams help you visualize the branch structure?

This is a difficult question to answer.  The diagrams help with vizualization of the branch structure because it is a visual representation of the branch structure!  The diagrams just make it easy to see how different branches diverge, what commits are associated with what branches, and what commits if any are unreachable.